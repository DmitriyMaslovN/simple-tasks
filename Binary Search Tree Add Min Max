var displayTree = (tree) => console.log(JSON.stringify(tree, null, 2));
function Node(value) {
    this.value = value;
    this.left = null;
    this.right = null;
}
function BinarySearchTree() {
    this.root = null;

    this.add = (value) => {
      let int = 0;
        if(Number.isInteger(value)){
           int = value
        }
      let node = new Node(int);
        if(!this.root){
            this.root = node; // first value
        }else{
            let currNode = this.root;
            while(currNode){
                if(node.value < currNode.value){
                    if(!currNode.left){
                        currNode.left = node; // if  left = null;
                        break;
                    }
                    currNode = currNode.left; // if the same left in current node
                }else if(node.value > currNode.value){
                    if(!currNode.right){
                        currNode.right = node;
                        break;
                    }
                    currNode = currNode.right;
                }else{
                    break;  
                }
            }
        }
      return this.root
    }

  this.findMin = (node) => {
    if(!node){
      node = this.root;
    }
    if(!node){
      return -1;
    }
    
    while(node.left){
      node = node.left; // iteration down
    }
    return node.value // min value
  }
  
  this.findMax = (node) => {
    if(!node){
      node = this.root;
    }
    if(!node){
      return -1;
    }
    
    while(node.right){
      node = node.right; // iteration down
    }
    return node.value // max value
  }
  
   this.isPresent = (val) => {

        let currNode = this.root;
        
        let truth = false;
       while(currNode){
            if(val === currNode.value) {
              truth =  true;
            }else if(val < currNode.value){
              currNode = currNode.left; // left iteration
            }else if(val > currNode.value){
              currNode = currNode.right;
            }else if(val !== currNode.value) {
              truth = false
            };
           }
            return truth;
        }
    
      this.findMinHeight = (root) => {
        if(!root){
            root = this.root;
        }
        if(!root){
            return -1;
        }
        if(root.left === null && root.right === null){
            return 0;
        }
        if(root.left === null){
            return this.findMinHeight(root.right)  + 1;
        }
        if(root.right === null){
            return this.findMinHeight(root.left) + 1;
        }

        return Math.min(this.findMinHeight(root.right), this.findMinHeight(root.left)) + 1;
                
       }

   this.findMaxHeight = (root) => {
       if(!root){
            root = this.root;
        }
        if(!root){
            return -1;
        }
        if(root.left === null && root.right === null){
            return 0;
        }
        if(root.left === null){
            return this.findMaxHeight(root.right) + 1;
        }
        if(root.right === null){
            return this.findMaxHeight(root.left) + 1;
        }
       
        return Math.max(this.findMaxHeight(root.right), this.findMaxHeight(root.left)) + 1;
        
    }

    this.isBalanced = (root) => {
        if(!root) root = this.root;
        if(!root) return false;

        let leftHeight = this.findMaxHeight(root.left);
        let rightHeight = this.findMaxHeight(root.right);
        
        let balanced = rightHeight - leftHeight;

        if(balanced >= 1){
            return true;
        }else{
            return false;
        }
    }
}

let bst = new BinarySearchTree()

bst.add(25);
bst.add(15); // left
bst.add(35); // right
bst.add(45); // value 25  right.value 35 right.right.value 45

bst.isPresent(35); // true
bst.isPresent(100); // false
