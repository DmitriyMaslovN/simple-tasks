function LinkedList() { 
  var length = 0; 
  var head = null; 

  var Node = function(element){ 
    this.element = element; 
    this.next = null; 
  }; 

  this.size = function(){
    return length;
  };

  this.head = function(){
    return head;
  };

  this.add = function(element){
    var node = new Node(element);
    if(head === null){
        head = node;
    } else {
        let currentNode = head;

        while(currentNode.next){
            currentNode  = currentNode.next;
        }

        currentNode.next = node;
    }

    length++;
  }; 

  this.remove = function(element){

        if(head.element === element){
       
      head = head.next;
    }else{
      let nextElem = head;
      while(nextElem.next){
        
        nextElem = nextElem.next;
 
        if(nextElem.element === element){
             nextElem.element = nextElem.next.element; // skipping one item
             nextElem.next = nextElem.next.next;
          } 
        }
        
        /* let nextElem = head;
           let prev;
           while(nextElem.element !== element){ // not so deep down
                    prev = nextElem;
                    nextElem = nextElem.next
                }
           prev.next = nextElem.next;
        */
      }
    length--;

  };
  
   this.indexOf = (element) => { // start index from 0, return index
    let objLength = 0;
    let index;
    let currentNode = head;
     console.log('ssss')
    while(currentNode.next){
      currentNode = currentNode.next;
      objLength++
      
      if(currentNode.element === element){
        
        index = objLength;
      }else{
        index = -1;
      }
    }
    return index
  }
  
   this.elementAt = (index) => { // start index from 0, return element
      let objLength = 0;
      let element;
      let currentHead = head;
      while(currentHead.next){
        currentHead = currentHead.next;
        objLength++
        if(objLength === index){
          element = currentHead.element;
        }
     }
     return element
  }
    this.removeAt = (index) => {
      let currentIndex = 0;
      let currentNode = head;
      let prev;

      while(currentNode.next){
        currentNode = currentNode.next;
        currentIndex++;
        if(index === currentIndex){
          prev = currentNode;
          currentNode = currentNode.next;
          length--;
          return prev.element;
        }else if(index >= length || index < length){
          return null;
        }
      }
      prev.next = currentNode.next; 
  }
}
